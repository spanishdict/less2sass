#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var fs = require('fs');
var less2sass = require('..');
var mkdir = require('mkdirp').sync;

/**
 * Helpers.
 */

function log(type, msg, color){
  color = color || '36';
  var w = 10;
  var len = Math.max(0, w - type.length);
  var pad = Array(len + 1).join(' ');
  console.log('  \033[' + color + 'm%s\033[m : \033[90m%s\033[m', pad + type, msg);
}

function info(type, msg){
  log(type, msg);
}

function warn(type, msg){
  log(type, msg, '33');
}

function error(type, msg){
  log(type, msg, '31');
}

function write(path, str) {
  if (fs.existsSync(path)) {
    warn('exists', path);
  } else {
    log('create', path, '32');
    fs.writeFileSync(path, str);
  }
}

function isLessFile(filename) {
  return /\.less$/.test(filename);
}

function convert(filePath, norename, noconvert) {
  info('processing', filePath);

  var buffer = fs.readFileSync(filePath);
  var output;
  if (!noconvert) {
    output = less2sass.convert(buffer.toString());
  }
  var newPath = filePath;
  if (!norename) {
    newPath = filePath.replace(/\.less$/, '.scss');
  }
  if (!norename && !noconvert) {
    write(newPath, output);
  } else if (!noconvert && norename) {
    fs.writeFileSync(filePath, output);
  } else if (noconvert && !norename) {
    fs.renameSync(filePath, newPath);
  }
  
}

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('<less file>');


/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Commands:');
  console.log();
  console.log('    less2sass <less file>       converts the less file to scss.\n');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

// args void of file path

var args = process.argv.slice(3);

// command
if (program.args[0] === undefined) {
  error('fail', 'You must provide a file path');

  program.help();
}

const norename = (  
  process.argv.indexOf('-r') > -1 ? true : false
);

const noconvert = (  
  process.argv.indexOf('-c') > -1 ? true : false
);

function read(filePath) {
  var fullPath = path.resolve(process.cwd(), filePath);
  var stats = fs.statSync(fullPath);
  info('scanning', fullPath);
  
  if (isLessFile(fullPath)) {
    convert(fullPath, norename, noconvert);
  }
  else if (stats.isDirectory()){
    var files = fs.readdirSync(fullPath);

    for (var i = 0; i < files.length; i++) {
      read(path.join(fullPath, files[i]));
    }
  }
}

read(program.args[0]);
